initSidebarItems({"derive":[["Finalize",""],["Trace",""]],"fn":[["exec","Create a clean Interpreter and execute the code"],["forward","Execute the code using an existing Interpreter The str is consumed and the state of the Interpreter is changed"],["forward_val","Execute the code using an existing Interpreter. The str is consumed and the state of the Interpreter is changed Similar to `forward`, except the current value is returned instad of the string If the interpreter fails parsing an error value is returned instead (error object)"],["parse","Parses the given source code."]],"macro":[["custom_trace","This rule implements the trace method."],["unsafe_empty_trace","This rule implements the trace methods with empty implementations."]],"mod":[["builtins","Builtins live here, such as Object, String, Math, etc."],["class","Traits and structs for implementing native classes."],["environment","Environment handling, lexical, object, function and declaritive records"],["exec","Execution of the AST, this is where the interpreter actually runs"],["profiler",""],["property","This module implements the Property Descriptor."],["realm","Conceptually, a realm consists of a set of intrinsic objects, an ECMAScript global environment, all of the ECMAScript code that is loaded within the scope of that global environment, and other associated state and resources."],["syntax","Syntactical analysis, such as Abstract Syntax Tree (AST), Parsing and Lexing"],["value","This module implements the JavaScript Value."]],"trait":[["Finalize","The Finalize trait. Can be specialized for a specific type to define finalization logic for that type."],["Trace","The Trace trait, which needs to be implemented on garbage-collected objects."]],"type":[["Result","The result of a Javascript expression is represented like this so it can succeed (`Ok`) or fail (`Err`)"]]});