initSidebarItems({"fn":[["call_string","Call new string [[Call]]"],["char_at","`String.prototype.charAt( index )`"],["char_code_at","`String.prototype.charCodeAt( index )`"],["concat","`String.prototype.concat( str1[, ...strN] )`"],["create","Create a new `String` object."],["ends_with","`String.prototype.endsWith( searchString[, length] )`"],["get_regex_string","Return either the string itself or the string of the regex equivalent"],["includes","`String.prototype.includes( searchString[, position] )`"],["index_of","`String.prototype.indexOf( searchValue[, fromIndex] )`"],["init","Initialise the `String` object on the global object."],["is_trimmable_whitespace","Helper function to check if a `char` is trimmable."],["last_index_of","`String.prototype.lastIndexOf( searchValue[, fromIndex] )`"],["make_string","Create new string [[Construct]]"],["match","`String.prototype.match( regexp )`"],["match_all","`String.prototype.matchAll( regexp )`"],["pad_end","`String.prototype.padEnd( targetLength[, padString] )`"],["pad_start","`String.prototype.padStart( targetLength [, padString] )`"],["repeat","`String.prototype.repeat( count )`"],["replace","`String.prototype.replace( regexp|substr, newSubstr|function )`"],["slice","`String.prototype.slice( beginIndex [, endIndex] )`"],["starts_with","`String.prototype.startWith( searchString[, position] )`"],["string_pad","Abstract method `StringPad`."],["substr","`String.prototype.substr( start[, length] )`"],["substring","`String.prototype.substring( indexStart[, indexEnd] )`"],["to_lowercase","`String.prototype.toLowerCase()`"],["to_string","Get the string value to a primitive string"],["to_uppercase","`String.prototype.toUpperCase()`"],["trim","String.prototype.trim()"],["trim_end","String.prototype.trimEnd()"],["trim_start","`String.prototype.trimStart()`"],["value_of","String.prototype.valueOf()"]]});